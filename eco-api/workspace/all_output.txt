Based on the requirements and assumptions, the following core functions will be necessary:

1. `add_points_to_user(url: str, email: str) -> int`: Accepts a URL and user email, checks if the URL is part of the list of green URLs, and adds 10 points to the user if it is. Returns the updated points of the user.
2. `get_user_points(email: str) -> int`: Returns the amount of points a particular user has.
3. `login_user(email: str, password: str) -> bool`: Validates the user's login credentials and returns True if the login is successful, False otherwise.
4. `get_user_info(email: str) -> dict`: Returns information about the user, including their email and points.
5. `register_user(email: str, password: str) -> bool`: Registers a new user with the provided email and password. Returns True if the registration is successful, False otherwise.

Now let's proceed with creating the necessary files and implementing the code.

1. `main.py` - The entry point of the API.

```python
from flask import Flask, request, jsonify
from database import get_user_points, add_points_to_user, login_user, get_user_info, register_user

app = Flask(__name__)

@app.route('/add_points', methods=['POST'])
def add_points():
    url = request.json.get('url')
    email = request.json.get('email')
    points = add_points_to_user(url, email)
    return jsonify({'points': points})

@app.route('/get_points', methods=['GET'])
def get_points():
    email = request.args.get('email')
    points = get_user_points(email)
    return jsonify({'points': points})

@app.route('/login', methods=['POST'])
def login():
    email = request.json.get('email')
    password = request.json.get('password')
    success = login_user(email, password)
    return jsonify({'success': success})

@app.route('/dashboard', methods=['GET'])
def dashboard():
    email = request.args.get('email')
    user_info = get_user_info(email)
    return jsonify(user_info)

@app.route('/register', methods=['POST'])
def register():
    email = request.json.get('email')
    password = request.json.get('password')
    success = register_user(email, password)
    return jsonify({'success': success})

if __name__ == '__main__':
    app.run()
```

2. `database.py` - Handles database operations.

```python
import mysql.connector

# Connect to the MySQL database
db = mysql.connector.connect(
    host='localhost',
    user='your_username',
    password='your_password',
    database='your_database'
)

def add_points_to_user(url: str, email: str) -> int:
    # Check if the URL is part of the list of green URLs
    if url in green_urls:
        # Get the current points of the user
        points = get_user_points(email)
        # Add 10 points to the user
        points += 10
        # Update the user's points in the database
        update_points(email, points)
        return points
    else:
        return get_user_points(email)

def get_user_points(email: str) -> int:
    # Retrieve the user's points from the database
    cursor = db.cursor()
    query = "SELECT points FROM users WHERE email = %s"
    cursor.execute(query, (email,))
    result = cursor.fetchone()
    cursor.close()
    if result:
        return result[0]
    else:
        return 0

def update_points(email: str, points: int):
    # Update the user's points in the database
    cursor = db.cursor()
    query = "UPDATE users SET points = %s WHERE email = %s"
    cursor.execute(query, (points, email))
    db.commit()
    cursor.close()

def login_user(email: str, password: str) -> bool:
    # Validate the user's login credentials
    cursor = db.cursor()
    query = "SELECT * FROM users WHERE email = %s AND password = %s"
    cursor.execute(query, (email, password))
    result = cursor.fetchone()
    cursor.close()
    if result:
        return True
    else:
        return False

def get_user_info(email: str) -> dict:
    # Retrieve the user's information from the database
    cursor = db.cursor()
    query = "SELECT email, points FROM users WHERE email = %s"
    cursor.execute(query, (email,))
    result = cursor.fetchone()
    cursor.close()
    if result:
        return {'email': result[0], 'points': result[1]}
    else:
        return {}

def register_user(email: str, password: str) -> bool:
    # Register a new user in the database
    cursor = db.cursor()
    query = "INSERT INTO users (email, password, points) VALUES (%s, %s, 0)"
    try:
        cursor.execute(query, (email, password))
        db.commit()
        cursor.close()
        return True
    except mysql.connector.Error:
        cursor.close()
        return False
```

3. `green_urls.py` - Contains the list of green URLs.

```python
green_urls = [
    'https://example.com/green-url1',
    'https://example.com/green-url2',
    'https://example.com/green-url3'
]
```

4. `requirements.txt` - Specifies the required packages for the project.

```
Flask==1.1.2
mysql-connector-python==8.0.26
```

Please note that you need to replace `'your_username'`, `'your_password'`, and `'your_database'` in `database.py` with your actual MySQL credentials and database name.

Make sure to install the required packages by running `pip install -r requirements.txt` before running the API.

This architecture includes the necessary functions to handle adding points to a user, retrieving user points, user login, user registration, and retrieving user information for the dashboard route. The MySQL database is used to store user information and points.