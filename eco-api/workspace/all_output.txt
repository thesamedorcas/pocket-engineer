Based on the requirements, the following core functions will be necessary:

1. `add_points_to_user(url: str, email: str) -> None`: Accepts a URL and user email. If the URL is part of the list of green URLs, it adds 10 points to the user.
2. `get_user_points(email: str) -> int`: Returns the amount of points a particular user has.
3. `login_user(email: str, password: str) -> bool`: Validates the user's login credentials (email and password).
4. `get_user_info(email: str) -> dict`: Returns information about the user, including their email and points.

Now let's proceed with creating the necessary files and writing the code.

1. `main.py` - The entry point of the API.

```python
from flask import Flask, request, jsonify
from api import add_points_to_user, get_user_points, login_user, get_user_info

app = Flask(__name__)

@app.route('/add_points', methods=['POST'])
def add_points():
    data = request.get_json()
    url = data.get('url')
    email = data.get('email')
    if url and email:
        add_points_to_user(url, email)
        return jsonify({'message': 'Points added successfully'})
    else:
        return jsonify({'error': 'Invalid request'})

@app.route('/get_points', methods=['GET'])
def get_points():
    email = request.args.get('email')
    if email:
        points = get_user_points(email)
        return jsonify({'points': points})
    else:
        return jsonify({'error': 'Invalid request'})

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    if email and password:
        if login_user(email, password):
            return jsonify({'message': 'Login successful'})
        else:
            return jsonify({'error': 'Invalid credentials'})
    else:
        return jsonify({'error': 'Invalid request'})

@app.route('/dashboard', methods=['GET'])
def dashboard():
    email = request.args.get('email')
    if email:
        user_info = get_user_info(email)
        return jsonify(user_info)
    else:
        return jsonify({'error': 'Invalid request'})

if __name__ == '__main__':
    app.run()
```

2. `api.py` - Contains the core functions of the API.

```python
from typing import List

green_urls = [
    'https://example.com',
    'https://example.org',
    'https://example.net'
]

user_data = {
    'user1@example.com': {
        'password': 'password1',
        'points': 0
    },
    'user2@example.com': {
        'password': 'password2',
        'points': 0
    }
}

def add_points_to_user(url: str, email: str) -> None:
    if url in green_urls:
        user_data[email]['points'] += 10

def get_user_points(email: str) -> int:
    return user_data.get(email, {}).get('points', 0)

def login_user(email: str, password: str) -> bool:
    user = user_data.get(email)
    if user and user['password'] == password:
        return True
    return False

def get_user_info(email: str) -> dict:
    user = user_data.get(email)
    if user:
        return {'email': email, 'points': user['points']}
    return {}
```

3. `requirements.txt` - Lists the required packages for the API.

```
flask
```

Please note that the above code assumes the use of Flask as the web framework. You may need to install Flask using `pip install flask` before running the API.