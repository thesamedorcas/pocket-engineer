[{"role":"assistant","content":"You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\n you should also keep this in mindAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"},{"role":"assistant","content":"You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\n\nThis specification will be used later as the basis for the implementation.\n"},{"role":"user","content":"You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\n\nThis specification will be used later as the basis for the implementation.\n"},{"role":"ai","content":"**Program Specification:**\n\nThe program is a task management application that allows users to create, update, and manage tasks. It should have the following features:\n\n1. User Authentication:\n   - Users should be able to register an account with a unique username and password.\n   - Users should be able to log in to their account using their username and password.\n   - Users should be able to log out of their account.\n\n2. Task Management:\n   - Users should be able to create a new task with a title, description, and due date.\n   - Users should be able to view a list of all their tasks.\n   - Users should be able to view the details of a specific task.\n   - Users should be able to update the details of a task, including the title, description, and due date.\n   - Users should be able to mark a task as completed.\n   - Users should be able to delete a task.\n\n3. Task Filtering and Sorting:\n   - Users should be able to filter tasks based on their completion status (completed or not completed).\n   - Users should be able to sort tasks based on their due date (ascending or descending).\n\n4. User Interface:\n   - The program should have a command-line interface (CLI) for users to interact with.\n   - The CLI should display a menu of options for users to choose from.\n   - The CLI should provide clear instructions and prompts for users to input data.\n\n**Core Classes, Functions, and Methods:**\n\n1. User:\n   - Represents a user account.\n   - Properties:\n     - username: str (the unique username of the user)\n     - password: str (the password of the user)\n   - Methods:\n     - register(username: str, password: str) -> User: Registers a new user account with the given username and password.\n     - login(username: str, password: str) -> User: Logs in to the user account with the given username and password.\n     - logout(): Logs out of the user account.\n\n2. Task:\n   - Represents a task.\n   - Properties:\n     - title: str (the title of the task)\n     - description: str (the description of the task)\n     - due_date: datetime (the due date of the task)\n     - completed: bool (the completion status of the task)\n   - Methods:\n     - create(title: str, description: str, due_date: datetime) -> Task: Creates a new task with the given title, description, and due date.\n     - update(title: str, description: str, due_date: datetime): Updates the details of the task with the given title, description, and due date.\n     - mark_completed(): Marks the task as completed.\n     - delete(): Deletes the task.\n\n3. TaskManager:\n   - Manages the tasks for a user.\n   - Properties:\n     - tasks: List[Task] (the list of tasks for the user)\n   - Methods:\n     - get_all_tasks() -> List[Task]: Returns a list of all tasks for the user.\n     - get_task_details(task_id: int) -> Task: Returns the details of the task with the given task ID.\n     - filter_tasks(completed: bool) -> List[Task]: Returns a list of tasks filtered by completion status.\n     - sort_tasks(by_due_date: str) -> List[Task]: Returns a list of tasks sorted by due date.\n\n4. CLI:\n   - Provides a command-line interface for users to interact with.\n   - Methods:\n     - display_menu(): Displays the menu of options for users to choose from.\n     - get_user_input(prompt: str) -> str: Prompts the user for input and returns the user's response.\n     - show_tasks(tasks: List[Task]): Displays the list of tasks.\n     - show_task_details(task: Task): Displays the details of a specific task.\n     - show_message(message: str): Displays a message to the user.\n\n5. Main:\n   - The entry point of the program.\n   - Methods:\n     - main(): The main function that runs the program.\n\n**Note:** The above classes, functions, and methods are just a starting point and may be subject to change based on the implementation requirements."}]