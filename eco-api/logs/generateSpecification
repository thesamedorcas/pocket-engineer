[{"role":"assistant","content":"You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\n you should also keep this in mindAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"},{"role":"assistant","content":"You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\n\nThis specification will be used later as the basis for the implementation.\n"},{"role":"user","content":"You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\n\nThis specification will be used later as the basis for the implementation.\n"},{"role":"ai","content":"**Program Specification:**\n\nThe program is a task management application that allows users to create, update, and manage tasks. It should have the following features:\n\n1. User Registration and Login:\n   - Users should be able to register an account with a unique username and password.\n   - Users should be able to login to their account using their username and password.\n\n2. Task Management:\n   - Users should be able to create a new task with a title, description, and due date.\n   - Users should be able to view a list of all their tasks.\n   - Users should be able to update the details of a task (title, description, due date).\n   - Users should be able to mark a task as completed.\n   - Users should be able to delete a task.\n\n3. Task Filtering and Sorting:\n   - Users should be able to filter tasks based on their completion status (completed or not completed).\n   - Users should be able to sort tasks based on their due date (ascending or descending).\n\n4. User Interface:\n   - The program should have a command-line interface (CLI) for users to interact with.\n   - The CLI should provide clear instructions and options for each action.\n   - The CLI should display task information in a readable format.\n\n**Core Classes, Functions, and Methods:**\n\n1. User:\n   - A class representing a user with attributes like username and password.\n   - Methods:\n     - `register(username: str, password: str) -> User`: Registers a new user with the given username and password.\n     - `login(username: str, password: str) -> User`: Logs in the user with the given username and password.\n\n2. Task:\n   - A class representing a task with attributes like title, description, due date, and completion status.\n   - Methods:\n     - `create_task(title: str, description: str, due_date: datetime) -> Task`: Creates a new task with the given title, description, and due date.\n     - `update_task(task_id: int, title: str, description: str, due_date: datetime) -> Task`: Updates the details of the task with the given task ID.\n     - `mark_task_completed(task_id: int) -> Task`: Marks the task with the given task ID as completed.\n     - `delete_task(task_id: int) -> None`: Deletes the task with the given task ID.\n\n3. TaskManager:\n   - A class responsible for managing tasks and providing task-related functionalities.\n   - Methods:\n     - `get_all_tasks(user_id: int) -> List[Task]`: Retrieves all tasks for the user with the given user ID.\n     - `filter_tasks_by_completion(user_id: int, completed: bool) -> List[Task]`: Filters tasks for the user with the given user ID based on completion status.\n     - `sort_tasks_by_due_date(user_id: int, ascending: bool) -> List[Task]`: Sorts tasks for the user with the given user ID based on due date.\n\n4. CLI:\n   - A class representing the command-line interface for the program.\n   - Methods:\n     - `display_menu() -> None`: Displays the main menu options.\n     - `register_user() -> None`: Prompts the user to register a new account.\n     - `login_user() -> None`: Prompts the user to login to their account.\n     - `create_task() -> None`: Prompts the user to create a new task.\n     - `update_task() -> None`: Prompts the user to update the details of a task.\n     - `mark_task_completed() -> None`: Prompts the user to mark a task as completed.\n     - `delete_task() -> None`: Prompts the user to delete a task.\n     - `filter_tasks() -> None`: Prompts the user to filter tasks based on completion status.\n     - `sort_tasks() -> None`: Prompts the user to sort tasks based on due date.\n     - `display_tasks(tasks: List[Task]) -> None`: Displays the list of tasks in a readable format.\n\n5. Main:\n   - The entry point of the program.\n   - Functions:\n     - `main() -> None`: Initializes the CLI and starts the program.\n\nNow that we have a clear specification and the core classes, functions, and methods defined, we can proceed with the implementation."}]