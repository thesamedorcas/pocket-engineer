**Program Specification:**

The program is a task management application that allows users to create, update, and manage tasks. It should have the following features:

1. User Registration and Login:
   - Users should be able to register an account with a unique username and password.
   - Users should be able to login to their account using their username and password.

2. Task Management:
   - Users should be able to create a new task with a title, description, and due date.
   - Users should be able to view a list of all their tasks.
   - Users should be able to update the details of a task (title, description, due date).
   - Users should be able to mark a task as completed.
   - Users should be able to delete a task.

3. Task Filtering and Sorting:
   - Users should be able to filter tasks based on their completion status (completed or not completed).
   - Users should be able to sort tasks based on their due date (ascending or descending).

4. User Interface:
   - The program should have a command-line interface (CLI) for users to interact with.
   - The CLI should provide clear instructions and options for each action.
   - The CLI should display task information in a readable format.

**Core Classes, Functions, and Methods:**

1. User:
   - A class representing a user with attributes like username and password.
   - Methods:
     - `register(username: str, password: str) -> User`: Registers a new user with the given username and password.
     - `login(username: str, password: str) -> User`: Logs in the user with the given username and password.

2. Task:
   - A class representing a task with attributes like title, description, due date, and completion status.
   - Methods:
     - `create_task(title: str, description: str, due_date: datetime) -> Task`: Creates a new task with the given title, description, and due date.
     - `update_task(task_id: int, title: str, description: str, due_date: datetime) -> Task`: Updates the details of the task with the given task ID.
     - `mark_task_completed(task_id: int) -> Task`: Marks the task with the given task ID as completed.
     - `delete_task(task_id: int) -> None`: Deletes the task with the given task ID.

3. TaskManager:
   - A class responsible for managing tasks and providing task-related functionalities.
   - Methods:
     - `get_all_tasks(user_id: int) -> List[Task]`: Retrieves all tasks for the user with the given user ID.
     - `filter_tasks_by_completion(user_id: int, completed: bool) -> List[Task]`: Filters tasks for the user with the given user ID based on completion status.
     - `sort_tasks_by_due_date(user_id: int, ascending: bool) -> List[Task]`: Sorts tasks for the user with the given user ID based on due date.

4. CLI:
   - A class representing the command-line interface for the program.
   - Methods:
     - `display_menu() -> None`: Displays the main menu options.
     - `register_user() -> None`: Prompts the user to register a new account.
     - `login_user() -> None`: Prompts the user to login to their account.
     - `create_task() -> None`: Prompts the user to create a new task.
     - `update_task() -> None`: Prompts the user to update the details of a task.
     - `mark_task_completed() -> None`: Prompts the user to mark a task as completed.
     - `delete_task() -> None`: Prompts the user to delete a task.
     - `filter_tasks() -> None`: Prompts the user to filter tasks based on completion status.
     - `sort_tasks() -> None`: Prompts the user to sort tasks based on due date.
     - `display_tasks(tasks: List[Task]) -> None`: Displays the list of tasks in a readable format.

5. Main:
   - The entry point of the program.
   - Functions:
     - `main() -> None`: Initializes the CLI and starts the program.

Now that we have a clear specification and the core classes, functions, and methods defined, we can proceed with the implementation.